name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run Black (code formatting)
        run: black --check --diff syft_client tests

      - name: Run isort (import sorting)
        run: isort --check-only --diff syft_client tests

      - name: Run Flake8 (linting)
        run: flake8 syft_client tests

      - name: Run MyPy (type checking)
        run: mypy syft_client

  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run unit tests
        run: |
          pytest tests/unit -v --tb=short -m "unit and not integration" \
            --cov=syft_client \
            --cov-report=xml \
            --cov-report=term-missing \
            --junit-xml=junit-${{ matrix.os }}-${{ matrix.python-version }}.xml

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: junit-*.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    # Only run integration tests on main branch or when manually triggered
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Setup test credentials
        env:
          GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
          TEST_USER1_CREDENTIALS: ${{ secrets.TEST_USER1_CREDENTIALS }}
          TEST_USER2_CREDENTIALS: ${{ secrets.TEST_USER2_CREDENTIALS }}
        run: |
          echo "Setting up test credentials..."
          mkdir -p ~/.syft/test
          echo "$GOOGLE_SERVICE_ACCOUNT_KEY" > ~/.syft/test/service-account.json
          echo "$TEST_USER1_CREDENTIALS" > ~/.syft/test/user1-creds.json
          echo "$TEST_USER2_CREDENTIALS" > ~/.syft/test/user2-creds.json

      - name: Run integration tests
        env:
          TEST_USER1_EMAIL: ${{ secrets.TEST_USER1_EMAIL }}
          TEST_USER2_EMAIL: ${{ secrets.TEST_USER2_EMAIL }}
          GOOGLE_APPLICATION_CREDENTIALS: ~/.syft/test/service-account.json
          SYFT_TEST_MODE: integration
        run: |
          pytest tests/integration -v --tb=short -m "integration" \
            --cov=syft_client \
            --cov-append \
            --cov-report=xml \
            --junit-xml=junit-integration.xml \
            --maxfail=3

      - name: Cleanup test data
        if: always()
        env:
          TEST_USER1_EMAIL: ${{ secrets.TEST_USER1_EMAIL }}
          TEST_USER2_EMAIL: ${{ secrets.TEST_USER2_EMAIL }}
          GOOGLE_APPLICATION_CREDENTIALS: ~/.syft/test/service-account.json
        run: |
          python -c "
          import os
          import sys
          sys.path.insert(0, '.')
          from tests.utils.cleanup import cleanup_all_test_data
          cleanup_all_test_data()
          "

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: |
            junit-integration.xml
            coverage.xml
            htmlcov/

      - name: Upload coverage (integration)
        if: always()
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: integration
          name: codecov-integration
          fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security scan
        uses: securecodewarrior/github-action-bandit@v1
        with:
          args: '-r syft_client -f json -o bandit-report.json'

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: bandit-report.json

  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-packages
          path: dist/