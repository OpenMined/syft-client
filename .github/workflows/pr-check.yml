name: PR Quick Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1

jobs:
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for changed files detection

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            syft_client/**/*.py
            tests/**/*.py

      - name: Run linting on changed files only
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Changed Python files: ${{ steps.changed-files.outputs.all_changed_files }}"
          
          # Run black on changed files
          black --check --diff ${{ steps.changed-files.outputs.all_changed_files }}
          
          # Run isort on changed files  
          isort --check-only --diff ${{ steps.changed-files.outputs.all_changed_files }}
          
          # Run flake8 on changed files
          flake8 ${{ steps.changed-files.outputs.all_changed_files }}

      - name: Run fast unit tests
        run: |
          pytest tests/unit -v --tb=short -m "unit and not slow" \
            --maxfail=5 \
            --disable-warnings \
            --no-cov

      - name: Test import
        run: |
          python -c "
          import syft_client as sc
          print('✅ Import successful')
          print(f'Version: {sc.__version__}')
          print(f'Available functions: {sc.__all__}')
          "

  security-quick-check:
    name: Security Quick Check
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'syft_client/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install bandit
        run: pip install bandit[toml]

      - name: Run security scan
        run: |
          bandit -r syft_client -f json -o bandit-pr-report.json || true
          bandit -r syft_client --severity-level medium --exit-zero

      - name: Comment security findings
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            try {
              const report = JSON.parse(fs.readFileSync('bandit-pr-report.json', 'utf8'));
              if (report.results && report.results.length > 0) {
                const findings = report.results.map(r => 
                  `- **${r.test_name}** in \`${r.filename}:${r.line_number}\`: ${r.issue_text}`
                ).join('\n');
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## 🔒 Security Scan Results\n\n${findings}\n\n*Please review these security findings before merging.*`
                });
              }
            } catch (error) {
              console.log('No security report found or error reading it:', error.message);
            }

  compatibility-check:
    name: Python Compatibility Check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.11"]  # Test oldest and newest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run syntax check
        run: |
          python -m py_compile syft_client/*.py

      - name: Run basic import test
        run: |
          python -c "
          import syft_client
          print(f'✅ Python {python_version} compatibility OK')
          " python_version="${{ matrix.python-version }}"

      - name: Run minimal unit tests
        run: |
          pytest tests/unit -k "test_import or test_init" --tb=short -q

  size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR size
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const additions = pr.additions;
            const deletions = pr.deletions;
            const totalChanges = additions + deletions;

            console.log(`PR changes: +${additions} -${deletions} (${totalChanges} total)`);

            if (totalChanges > 1000) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 📏 Large PR Warning\n\nThis PR has ${totalChanges} lines of changes (+${additions} -${deletions}). Consider breaking it into smaller PRs for easier review.\n\n*Large PRs take longer to review and are more likely to have issues.*`
              });
            }

  label-pr:
    name: Auto Label PR
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Label PR based on changes
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const labels = [];

            // Check file patterns and add appropriate labels
            const fileNames = files.map(f => f.filename);
            
            if (fileNames.some(f => f.includes('test'))) {
              labels.push('tests');
            }
            if (fileNames.some(f => f.includes('.github/workflows'))) {
              labels.push('ci/cd');
            }
            if (fileNames.some(f => f.includes('auth.py'))) {
              labels.push('authentication');
            }
            if (fileNames.some(f => f.includes('gdrive'))) {
              labels.push('google-drive');
            }
            if (fileNames.some(f => f.endsWith('.md'))) {
              labels.push('documentation');
            }
            if (pr.additions > pr.deletions * 2) {
              labels.push('feature');
            } else if (pr.deletions > pr.additions * 2) {
              labels.push('cleanup');
            }

            // Add size label
            const totalChanges = pr.additions + pr.deletions;
            if (totalChanges < 50) {
              labels.push('size/small');
            } else if (totalChanges < 200) {
              labels.push('size/medium');
            } else {
              labels.push('size/large');
            }

            // Apply labels
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }