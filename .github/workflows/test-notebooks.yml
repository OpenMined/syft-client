name: Notebook CI Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual triggering

jobs:
  test-notebooks:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jupyter nbconvert nbformat
          pip install pyarrow fastparquet  # For parquet support
          pip install -e ".[job]"

      - name: Setup test1 credentials
        env:
          TEST_USER1_CREDS: ${{ secrets.TEST_USER1_GOOGLE_CREDENTIALS }}
          TEST_USER1_CONFIG: ${{ secrets.TEST_USER1_CONFIG }}
          TEST_USER1_EMAIL: ${{ secrets.TEST_USER1_EMAIL }}
        run: |
          mkdir -p ~/.syft/test1_at_openmined_org/tokens
          mkdir -p ~/SyftBox_$TEST_USER1_EMAIL
          echo "$TEST_USER1_CREDS" > ~/.syft/test1_at_openmined_org/tokens/google_org.json
          echo "$TEST_USER1_CONFIG" > ~/.syft/test1_at_openmined_org/config.json
          echo "‚úÖ test1 credentials configured for $TEST_USER1_EMAIL"
          ls -la ~/.syft/test1_at_openmined_org/

      - name: Setup test2 credentials
        env:
          TEST_USER2_CREDS: ${{ secrets.TEST_USER2_GOOGLE_CREDENTIALS }}
          TEST_USER2_CONFIG: ${{ secrets.TEST_USER2_CONFIG }}
          TEST_USER2_EMAIL: ${{ secrets.TEST_USER2_EMAIL }}
        run: |
          mkdir -p ~/.syft/test2_at_openmined_org/tokens
          mkdir -p ~/SyftBox_$TEST_USER2_EMAIL
          echo "$TEST_USER2_CREDS" > ~/.syft/test2_at_openmined_org/tokens/google_org.json
          echo "$TEST_USER2_CONFIG" > ~/.syft/test2_at_openmined_org/config.json
          echo "‚úÖ test2 credentials configured for $TEST_USER2_EMAIL"
          ls -la ~/.syft/test2_at_openmined_org/

      - name: Verify authentication
        run: |
          echo "Testing test1 authentication..."
          python -c "
          import syft_client as sc
          try:
              client = sc.login('test1@openmined.org', skip_server_setup=True)
              print(f'‚úÖ test1 authenticated: {client.email}')
          except Exception as e:
              print(f'‚ùå test1 failed: {e}')
              exit(1)
          " || echo "‚ö†Ô∏è test1 auth failed but continuing..."

          echo "Testing test2 authentication..."
          python -c "
          import syft_client as sc
          try:
              client = sc.login('test2@openmined.org', skip_server_setup=True)
              print(f'‚úÖ test2 authenticated: {client.email}')
          except Exception as e:
              print(f'‚ùå test2 failed: {e}')
              exit(1)
          " || echo "‚ö†Ô∏è test2 auth failed but continuing..."

      - name: Run E2E Sales Test (Smart Mode)
        env:
          TEST_USER1_EMAIL: ${{ secrets.TEST_USER1_EMAIL }}
          TEST_USER2_EMAIL: ${{ secrets.TEST_USER2_EMAIL }}
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          python ci/run_notebook_smart.py --mode smart \
            --do-email "$TEST_USER1_EMAIL" \
            --ds-email "$TEST_USER2_EMAIL"
        continue-on-error: false

      - name: Run E2E Sales Test (Basic Mode)
        env:
          TEST_USER1_EMAIL: ${{ secrets.TEST_USER1_EMAIL }}
          TEST_USER2_EMAIL: ${{ secrets.TEST_USER2_EMAIL }}
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          python ci/run_notebook_smart.py --mode basic \
            --do-email "$TEST_USER1_EMAIL" \
            --ds-email "$TEST_USER2_EMAIL"
        continue-on-error: false

      - name: Collect test results
        if: always()
        run: |
          echo "üìä Test Results Summary"
          find test_outputs -name "test_results.json" -exec echo "Found: {}" \;
          find test_outputs -name "test_results.json" -exec cat {} \;

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: |
            test_outputs/
            test_suite_output.log
          retention-days: 30

      - name: Upload executed notebooks
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: executed-notebooks-${{ github.run_number }}
          path: test_outputs/**/*_executed.ipynb
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const resultsPath = 'test_outputs';

            // Find latest test results
            const { execSync } = require('child_process');
            try {
              const latestResults = execSync('find test_outputs -name "test_results.json" | head -1').toString().trim();
              if (latestResults) {
                const results = JSON.parse(fs.readFileSync(latestResults, 'utf8'));
                const summary = results.summary;

                const comment = `## üß™ Notebook Test Results

                **Status:** ${summary.passed === summary.total ? '‚úÖ All Passed' : '‚ö†Ô∏è Some Failed'}

                - Total: ${summary.total}
                - ‚úÖ Passed: ${summary.passed}
                - ‚ùå Failed: ${summary.failed}

                <details>
                <summary>Details</summary>

                ${results.results.map(r => `- ${r.status === 'SUCCESS' ? '‚úÖ' : '‚ùå'} ${r.notebook} (${r.elapsed.toFixed(1)}s)`).join('\n')}

                </details>

                [View full results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
                `;

                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Could not find test results:', error);
            }

      - name: Test Summary
        if: always()
        run: |
          echo "## Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "test_suite_output.log" ]; then
            echo "### Results" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -20 test_suite_output.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üì• **Artifacts**: Download test results and executed notebooks from the workflow run" >> $GITHUB_STEP_SUMMARY
